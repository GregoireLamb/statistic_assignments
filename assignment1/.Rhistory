library(microbenchmark)#Allows the use of the microbenchmark library
set.seed(11220221)#Create random data
x1 <- rnorm(100)
x2 <- rnorm(100, mean=1000000)
x3 <- rnorm(100, mean=0.0000001)
precise <- function(x) {
sum <- 0
n <- length(x)
#First pass: mean calculation
for (i in x) {
sum <- sum + i
}
mean <- sum/n
variance <- 0
#Second pass: variance calculation
for(i in x) {
variance <- variance + (i - mean)^2
}
variance <- variance/(n-1)
return(variance)
}
excel <- function(x) {
P1 <- 0
P2 <- 0
n <- length(x)
variance <- 0
for (i in x) {
P1 <- P1 + i^2
P2 <- P2 + i
}
P2 <- (P2^2)/n
variance <- (P1-P2)/(n-1)
return(variance)
}
shifted <- function(x, c=x[1]) {
P1 <- 0
P2 <- 0
n <- length(x)
variance <- 0
for (i in x) {
P1 <- P1 + (i-c)^2
P2 <- P2 + i-c
}
P2 <- (P2^2)/n
variance <- (P1-P2)/(n-1)
return(variance)
}
online <- function(x) {
#initalisation
n <- 2
mean <- (x[1]+x[2])/2
variance <- (x[1]-mean)^2 + (x[2]-mean)^2
#Mean and variance are computed after each element in x
for (i in 3:length(x)) {
n <- n+1
variance <- ((n-2)/(n-1)) * variance + ((x[i]-mean)^2/n)
mean <- mean + (x[i]-mean)/n
}
return(variance)
}
variances <- function(x){
return(c(precise(x), excel(x), shifted(x), online(x),var(x)))
}
res <- matrix(c(variances(x1),variances(x2)), ncol=5, byrow=TRUE)
res <- as.table(res)
col_name <- c("precise", "excel", "shifted", "online", "var")
raw_name <- c("x1","x2")
rownames(res) <- raw_name
colnames(res) <- col_name
knitr::kable(res, caption = "Variance calulation")
micro <- microbenchmark(precise(x1), excel(x1), shifted(x1), online(x1),var(x1),  times=100)
knitr::kable(summary(micro))
boxplot(micro, main="Computation times obtained with x1")
start_time <- Sys.time()
invisible(excel(x1))
end_time <- Sys.time()
computation_time = end_time-start_time
print(computation_time)
condition_number <- function(mean, n , S){
return(sqrt(1+(mean^2*n)/S))
}
c_val_influence <- function(x){
minimum <- min(x)
maximum <- max(x)
c_list <- seq(from=minimum, to=maximum, length.out=10)
c_list <- sort(append(c_list, mean(x1)))
condition_numb <- matrix(nrow = 2, ncol = 11)
for(i in 0:length(c_list)){
mean <- mean(x) - c_list[i]
n <- 100
S <- shifted(x,c_list[i])*(n-1)
condition_numb[1,i] <- c_list[i]
condition_numb[2,i] <- condition_number(mean, n ,S)
}
return(condition_numb)
}
res <- c_val_influence(x1)
plot(res[2,], x=res[1,], main="Influence of the c-value on the condition number", type='o',xlab="C_values", ylab="Condition number")
abline(v=mean(x1), col='red')
legend("bottomright", "mean value", col="red", lty=1)
res <- c()
res <- append(res,condition_number(mean(x1), 100,var(x1)*(100-1)))
res <- append(res,condition_number(mean(x2), 100,var(x2)*(100-1)))
res <- append(res,condition_number(mean(x3), 100,var(x3)*(100-1)))
r_name = c('x1','x2','x3')
knitr::kable(res, row.names=r_name , col.names=NULL, caption="Condition numbers for different dataset mean")
res <- c()
res <- append(res,condition_number(mean(x1), 100,var(x1)*(100-1)))
res <- append(res,condition_number(mean(x2), 100,var(x2)*(100-1)))
res <- append(res,condition_number(mean(x3), 100,var(x3)*(100-1)))
res <- as.data.frame(res, row.names=c('x1','x2','x3'))
knitr::kable(res , col.names=NULL, caption="Condition numbers for different dataset mean")
res <- c()
res <- append(res,condition_number(mean(x1), 100,var(x1)*(100-1)))
res <- append(res,condition_number(mean(x2), 100,var(x2)*(100-1)))
res <- append(res,condition_number(mean(x3), 100,var(x3)*(100-1)))
res <- as.data.frame(res, row.names=c('x1','x2','x3'))
knitr::kable(res , col.names="k", caption="Condition numbers for different dataset mean")
congruential_gen <- function(n,m,a,c=0,x0)
{
us <- numeric(n)
for (i in 1:n)
{
x0 <- (a*x0+c) %% m
us[i] <- x0 / m
}
return(us)
}
plot(congruential_gen(100,178,3,44,72), main="Random number generator")
plot(congruential_gen(100,178,3,44,72), main="Random number generator", ylabel="Random values")
plot(congruential_gen(100,178,3,44,72), main="Random number generator", ylabl="Random values")
plot(congruential_gen(100,178,3,44,72), main="Random number generator", ylab="Random values")
plot(lc_ng(25,10,2,2,4), main="Random number generator")
plot(congruential_gen(25,10,2,2,4), main="Random number generator")
plot(congruential_gen(25,100,2,2,4), main="Random number generator")
plot(congruential_gen(25,1,2,2,4), main="Random number generator m=1")
plot(congruential_gen(25,100,2,2,4), main="Random number generator")
plot(congruential_gen(25,1,2,2,4), main="Random number generator m=3")
plot(congruential_gen(25,100,2,2,4), main="Random number generator")
plot(congruential_gen(25,3,2,2,4), main="Random number generator m=3")
plot(congruential_gen(25,100,2,2,4), main="Random number generator")
plot(congruential_gen(25,3,2,2,0), main="Random number generator m=3")
plot(congruential_gen(25,100,2,2,4), main="Random number generator")
plot(congruential_gen(25,5,2,2,0), main="Random number generator m=3")
plot(congruential_gen(25,100,2,2,4), main="Random number generator")
plot(congruential_gen(15,5,2,2,0), main="Random number generator m=3")
plot(congruential_gen(25,100,2,2,4), main="Random number generator")
plot(congruential_gen(15,5,2,2,0), main="Random number generator m=5")
plot(congruential_gen(15,10,2,2,4), main="Random number generator m=10")
plot(congruential_gen(15,5,2,2,0), main="Random number generator m=5")
plot(congruential_gen(15,10,2,2,4), main="Random number generator m=10")
plot(congruential_gen(15,10,2,2,4), main="Random number generator m=100")
plot(congruential_gen(15,5,2,2,0), main="Random number generator m=5")
plot(congruential_gen(15,10,2,2,4), main="Random number generator m=10")
plot(congruential_gen(15,10,2,2,4), main="Random number generator m=50")
plot(congruential_gen(15,5,2,2,0), main="Random number generator m=5")
plot(congruential_gen(15,10,2,2,4), main="Random number generator m=10")
plot(congruential_gen(15,10,2,2,4), main="Random number generator m=41")
plot(congruential_gen(15,5,7,2,0), main="Random number generator m=5")
plot(congruential_gen(15,10,7,2,4), main="Random number generator m=10")
plot(congruential_gen(15,10,7,2,4), main="Random number generator m=41")
plot(congruential_gen(15,5,7,2,0), main="Random number generator m=5")
plot(congruential_gen(15,10,7,2,4), main="Random number generator m=10")
plot(congruential_gen(15,40,7,2,4), main="Random number generator m=41")
plot(congruential_gen(15,5,7,2,0), main="Random number generator m=5")
plot(congruential_gen(15,10,7,2,4), main="Random number generator m=10")
plot(congruential_gen(15,150,7,2,4), main="Random number generator m=41")
plot(congruential_gen(15,5,7,2,0), main="Random number generator m=5")
plot(congruential_gen(15,20,7,2,4), main="Random number generator m=20")
plot(congruential_gen(15,150,7,2,4), main="Random number generator m=150")
plot(congruential_gen(100,178,3,44,72), main="Random number generator", ylab="Random values")
congruential_gen <- function(n,m,a,c=0,x0)
{
us <- numeric(n)
for (i in 1:n)
{
x0 <- (a*x0+c) %% m
us[i] <- x0 / m
}
return(us)
}
plot(congruential_gen(100,178,3,44,72), main="Random number generator", ylab="Random values")
expf <- function(x, lambda){
return(1-exp(-lambda*x))
}
r <- runif(10,0,1)
s <- expf(r,5)
plot(s)
expf <- function(x, lambda){
return(1-exp(-lambda*x))
}
r <- runif(10,0,1)
s <- expf(r,5)
plot(s)
